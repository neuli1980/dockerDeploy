version: '3'

volumes:
  nextcloud-data:
  nextcloud-db:
  npm-data:
  npm-ssl:
  npm-db:

networks:
  frontend:
    # add this if the network is already existing!
    # external: true
  backend:


services:
  nextcloud-app:
    image: nextcloud
    restart: always
    volumes:
      - nextcloud-data:/var/www/html
#    environment:
#      - MYSQL_PASSWORD=mysupersecurePWD
#      - MYSQL_DATABASE=nextcloud
#      - MYSQL_USER=nextcloud
#      - MYSQL_HOST=nextcloud-db
    networks:
      - frontend
      - backend

#  nextcloud-db:
#    image: mariadb
#    restart: always
#    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
#    volumes:
#      - nextcloud-db:/var/lib/mysql
#    environment:
#      - MYSQL_ROOT_PASSWORD=mysupersecureROOTPWD
#      - MYSQL_PASSWORD=mysupersecurePWD
#      - MYSWL_USER=nextcloud
#    networks:
#      - backend

  npm-app:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    environment:
      - DB_MYSQL_HOST=npm-db
      - DB_MYSQL_PORT=3306
      - DB_MYSQL_USER=npm
      - DB_MYSQL_PASSWORD=superNPMPWD
      - DB_MYSQL_NAME=npm
    volumes:
      - npm-data:/data
#      - ./certbot/conf/:/etc/letsencrypt:ro
      - npm-ssl:/etc/letsencrypt
#      - ./certbot/conf/:/etc/letsencrypt
    networks:
      - frontend
      - backend

  npm-db:
    image: jc21/mariadb-aria:latest
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=superNPMROOTPWD
      - MYSQL_DATABASE=npm
      - MYSQL_USER=npm
      - MYSQL_PASSWORD=superNPMPWD
    volumes:
      - npm-db:/var/lib/mysql
    networks:
      - backend

  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
    hostname: mail.neugschwandtnerpublic.freeddns.org
    env_file: mailserver.env
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - ./docker-data/dms/mail-data/:/var/mail/
      - ./docker-data/dms/mail-state/:/var/mail-state/
      - ./docker-data/dms/mail-logs/:/var/log/mail/
      - ./docker-data/dms/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
    restart: always
    stop_grace_period: 1m
    # Uncomment if using `ENABLE_FAIL2BAN=1`:
    # cap_add:
    #   - NET_ADMIN
    healthcheck:
      test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
      timeout: 3s
      retries: 0
  
#  reverse-proxy:
#    # The official v2 Traefik docker image
#    image: traefik:v2.10
#    # Enables the web UI and tells Traefik to listen to docker
#    command: --api.insecure=true --providers.docker
#    ports:
#      # The HTTP port
#      - 80:80
#      # The Web UI (enabled by --api.insecure=true)
#      - 8082:8080
#    volumes:
#      # So that Traefik can listen to the Docker events
#      - /var/run/docker.sock:/var/run/docker.sock
#  webserver:
#    image: nginx:latest
#    ports:
#      - 80:80
#      - 443:443
#    restart: always
#    volumes:
#      - ./nginx/conf/:/etc/nginx/conf.d/:ro
#      - ./nginx/log/nginx/:/var/log/nginx/:rw
#      - ./certbot/www/:/var/www/certbot/:ro
#      - ./certbot/conf/:/etc/nginx/ssl/:ro
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/log/:/var/log/:rw
#  nextcloud2:
#    image: nextcloud
#    restart: always
#    ports:
#      - 8081:80
  testalpine:
    image: alpine
